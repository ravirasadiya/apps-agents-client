import React, { Component, useEffect, useState } from "react";
import Head from "next/head";
import Layout from "@/component/layouts/Layout";
import { Box, Grid } from "@mui/material";
import Typography from "@mui/material/Typography";
import DateAndSelect, { Filters } from "@/component/dashboard/DateAndSelect";
import ClubResultsTabal from "@/component/dashboard/ClubResultsTabal";
import PlayerResultsTable from "@/component/dashboard/PlayerResultsTable";
import NicknameResultsTabal from "@/component/dashboard/NicknameResultsTabal";
import { useRouter } from "next/router";
import { useToken } from "../hooks/get-user-login-status";
import PlayerIncome from "@/component/dashboard/player-income";
import {
  currentDateInFormat,
  getDateOfBeforeOneMonthInFormat,
} from "@/utils/get-date";
import {
  EndpointUrl,
  endpointUrls,
  getLocalStorage,
  getRecords,
  LocalStorageKeys,
} from "@/helper";
import { AgentResults } from "@/types/player-income";
import { generateUrl } from "@/helper/_api_wrapper";

export interface AgentAggregateRecord {
  title: string;
  price: string;
  currency: string;
}

export interface AgentIncomeResult {
  title: string;
  data: AgentAggregateRecord[];
}

export default function Dashboard() {
  const [token, setToken] = useToken();
  const [filters, setFilters] = useState<Filters>();
  const [dashboardAggregateResult, setDashboardAggregateResult] = useState<
    AgentIncomeResult[]
  >([]);

  const _router = useRouter();

  const resultArray: AgentIncomeResult[] = [];

  const agentIncomeArray: AgentAggregateRecord[] = [];
  const playerResultsArray: AgentAggregateRecord[] = [];
  const agentEarningsArray: AgentAggregateRecord[] = [];

  useEffect(() => {
    if (filters?.club) {
      getPlayerIncome();
    }
  }, [filters]);

  const getPlayerIncome = () => {
    const createArray = (key: string, value: string) => {
      if (key.startsWith("_agent_")) {
        return key.includes("_agent_earnings")
          ? agentEarningsArray
          : agentIncomeArray;
      } else if (key.startsWith("_player")) {
        return playerResultsArray;
      }
    };

    const pushToArray = (
      array: AgentAggregateRecord[],
      key: string,
      value: string
    ) => {
      array.push({
        title: key,
        price: value,
        currency: "$",
      });
    };

    const processKeyValue = (key: string, value: string) => {
      const array: AgentAggregateRecord[] = createArray(key, value) || [];
      pushToArray(array, key, value);
    };

    getRecords(generateUrl(endpointUrls[EndpointUrl.AGENT_RESULTS], filters))
      .then((response: AgentResults) => {
        for (const [key, value] of Object.entries(response)) {
          processKeyValue(key, value || "0.00");
        }

        if (agentIncomeArray.length > 0) {
          resultArray.push({ title: "Agent Income", data: agentIncomeArray });
        }
        if (playerResultsArray.length > 0) {
          resultArray.push({
            title: "Player Results",
            data: playerResultsArray,
          });
        }
        if (agentEarningsArray.length > 0) {
          resultArray.push({
            title: "Agent Earnings",
            data: agentEarningsArray,
          });
        }
        setDashboardAggregateResult(resultArray);
      })
      .catch((e) => {
        console.log("error while fetching agent results records:", e);
      });
  };

  useEffect(() => {
    if (!token) {
      _router.push("/login");
    }
  }, [token]);

  const handleFilterChange = (filters: any) => {
    setFilters(filters);
  };

  return (
    <Layout>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <Box>
          <Typography className="def_had_txt">Summary</Typography>
          <DateAndSelect onFilterChange={handleFilterChange} />
          <Box className="graph_bx">
            <Typography className="graph_bx_p">
              Player | Agent earnings
            </Typography>
            <img src="img/graph_img_01.png" alt="" />
          </Box>
          {/** Players Income */}
          {dashboardAggregateResult.map((item: AgentIncomeResult, index) => (
            <PlayerIncome key={item.title} data={item} />
          ))}
          {/** Players Income End */}
          <PlayerResultsTable filters={filters} />
          <ClubResultsTabal />
          {/* <NicknameResultsTabal /> */}
        </Box>
      </div>
    </Layout>
  );
}
